Index: src/Panel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.awt.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.*;\nimport javax.swing.table.DefaultTableModel;\nimport javax.swing.table.TableColumn;\nimport java.util.Random;\n\npublic class Panel extends JPanel {\n\n    protected JComboBox<String> difficultymenu, questionsmenu;\n    protected JButton exitButton, solutionButton, generateButton;\n    protected JLabel difficultylabel, questionlabel, question;\n    String[] difficulties = {\"Easy\", \"Average\", \"Herr Schaal\"};\n    String[] gatterarten = {\"AND\", \"OR\", \"NOT\"};\n    String[] questions = {\"Wahrheitstabelle\", \"Digitale Schaltung\"};\n\n    public Image background = new ImageIcon(\"Background.png\").getImage();\n    Image exitBild = new ImageIcon(\"ExitBild.png\").getImage();\n    private List<JLabel> gateLabels = new ArrayList<>();\n    JTable table;\n    DefaultTableModel tableModel;\n    Random numbers;\n    int min = 0;\n    int max = 1;\n    int zeilenanzahl;\n    int newanzahl;\n\n    boolean difficult = true;\n\n\n    public Panel() {\n\n        Image scaledExitImage = exitBild.getScaledInstance(50, 50, Image.SCALE_SMOOTH);\n        ImageIcon scaledExitIcon = new ImageIcon(scaledExitImage);\n        exitButton = new JButton(scaledExitIcon);\n        exitButton.setBorderPainted(false);\n        exitButton.setFocusPainted(false);\n        exitButton.setContentAreaFilled(false);\n\n        setLayout(null);\n\n        questionlabel = new JLabel(\"Choose your Question\");\n        difficultylabel = new JLabel(\"Choose your Difficulty\");\n        question = new JLabel(\"Erstelle aus dieser Wahrheitstabelle eine digitale Schaltungen!\");\n\n        questionlabel.setFont(new Font(\"SansSerif\", Font.BOLD, 13));\n        difficultylabel.setFont(new Font(\"SansSerif\", Font.BOLD, 13));\n        question.setFont(new Font(\"SansSerif\", Font.BOLD, 15));\n        question.setForeground(Color.BLACK);\n        questionlabel.setForeground(Color.BLACK);\n        difficultylabel.setForeground(Color.BLACK);\n\n        generateButton = new JButton(\"Generate\");\n        solutionButton = new JButton(\"Solution\");\n        difficultymenu = new JComboBox<>(difficulties);\n        questionsmenu = new JComboBox<>(questions);\n\n        questionlabel.setBounds(110, 13, 150, 30);\n        question.setBounds(200, 160, 600, 30);\n        difficultylabel.setBounds(360, 13, 150, 30);\n        generateButton.setBounds(600, 30, 150, 50);\n        difficultymenu.setBounds(360, 32, 150, 50);\n        questionsmenu.setBounds(110, 32, 160, 50);\n        solutionButton.setBounds(700, 300, 80, 50);\n        exitButton.setBounds(820, 5, 50, 50);\n\n        add(generateButton);\n        add(difficultymenu);\n        add(questionsmenu);\n        add(exitButton);\n        add(solutionButton);\n        add(questionlabel);\n        add(question);\n        add(difficultylabel);\n\n        questionlabel.setVisible(false);\n        questionsmenu.setVisible(false);\n        solutionButton.setVisible(false);\n\n        numbers = new Random();\n\n\n    }\n\n    //einfach parameter übergeben, die die anzahl der eingänge vorgibt. Z.b int gatteranzahl = 2, oder int = 3\n    //int ausgange\n    public void createTruthTable(int eingange, int ausgaenge, int gatterAnzahl) { //nur ein gatter aber dafür alle drei Eingänge drin, einziger unterschied sind, dass es drei kombis sind (not, and, or)\n        //Erstellen der NormalTabelle\n        tableModel = new DefaultTableModel();\n\n        String[] columnNames = new String[eingange]; //Anzahl der Spalten\n\n        if (eingange > 0) {\n            for (int i = 0; i < eingange+gatterAnzahl; i++) {\n                if(i < eingange) {\n                    char buchstabe = (char) ('A' + i);\n                    columnNames[i] = String.valueOf(buchstabe);\n                } else {\n                    // columnNames[i] = \"Platzhalter\";\n                    //Hier müssen dann die GatterSpaltenNamen erstellt werden bzw. die Namen derer\n                }\n\n            }\n        }\n        Object[][] rowData = new Object[eingange * eingange][eingange + gatterAnzahl]; //Tabellengröße = Zeilenanzahl + Spaltenanzahl\n        for (int i = 0; i < eingange * eingange; i++) {\n            for (int j = 0; j < eingange; j++) { //Füllen aller Zeilen/Spalten mit Nullen\n                rowData[i][j] = 0;\n\n            }\n            // Füllen der restlichen Binärziffern\n            String binärZahl = Integer.toBinaryString(i); //Umwandlung aller Zahlen von 0-anzahleingange\n            System.out.println(\"DIE ZAHL \" + i + \" = \" + binärZahl);\n            for (int j = 0; j < binärZahl.length(); j++) { //binärZahl.length ist wichtig, da die Binärzahlen teilweise nur einstellig nach der umwandlung sind\n                rowData[i][j] = Character.getNumericValue(binärZahl.charAt(j)); //auch hier wieder: eingange - binärZahl.length() + j ist notwenig, da eingeange nicht immer auch der binärZahl.länge entsprechen\n                // TODO: wenn eingänge >= 5 ist, dann das:  rowData[i][eingange - binärZahl.length() + j] = Character.getNumericValue(binärZahl.charAt(j)); //auch hier wieder: eingange - binärZahl.length() + j ist notwenig, da eingeange nicht immer auch der binärZahl.länge entsprechen\n\n            }\n            //Hier wird durch alle Zeilen durchgegangen und der gatterinhalt erstellt\n            for (int k = 0; k < gatterAnzahl; k++) {\n                //rowData[i][eingange+k] = \"Platzhalter\";\n\n                //eigentlich müsste hier lediglich addRandomGatter aufgerufen werden\n            }\n        }\n\n        tableModel.setDataVector(rowData, columnNames);\n        table = new JTable(tableModel);\n\n        //  table = new JTable(rowData, columnNames);\n        table.setVisible(true);\n        this.add(table);\n        table.setShowGrid(true);\n        table.setGridColor(Color.BLACK);\n        table.setRowHeight(30);\n\n        JScrollPane scrollPane = new JScrollPane(table);\n        scrollPane.setBounds(200, 250, table.getColumnCount() * 90, table.getRowCount() * table.getRowHeight() + 20);\n\n\n        add(scrollPane);\n\n        table.getTableHeader().setReorderingAllowed(false); // not allow re-ordering of columns\n        table.getTableHeader().setResizingAllowed(false);\n        table.setEnabled(false);\n        table.setBackground(Color.LIGHT_GRAY);\n\n        //Ende\n    }\n\n    public void addRandomGatter() {\n        //Beginn der GatterErstellung\n\n        Random random = new Random();\n        int randomGatter = random.nextInt(4);\n        System.out.println(\"RANDOMZAHL: \" + randomGatter);\n        int spaltenAnzahl = table.getColumnCount();\n        System.out.println(\"Spaltenanzahl \" + spaltenAnzahl);\n\n        if (difficult == true) {\n            int randomX = random.nextInt(3);\n            int randomY;\n            do {\n                randomY = random.nextInt(3);\n            } while (randomY == randomX);\n\n            String eingang1 = randomX == 0 ? \"A\" : randomX == 1 ? \"B\" : \"C\";\n            String eingang2 = randomY == 0 ? \"A\" : randomY == 1 ? \"B\" : \"C\";\n\n            String columnName = randomGatter == 0 ? eingang1 + \" AND \" + eingang2 : randomGatter == 1 ?\n                    eingang1 + \" OR \" + eingang2 : randomGatter == 2 ? eingang1 + \" NAND \" + eingang2 : eingang1 + \" NOR \" + eingang2;\n            tableModel.addColumn(columnName);\n\n            for (int i = 0; i < table.getRowCount(); i++) { //Durchgang durch alle Zeilen\n                Object x = table.getValueAt(i, randomX);\n                Object y = table.getValueAt(i, randomY);\n\n                switch(randomGatter) {\n                    //AND\n                    case 0:\n                        System.out.println(\"CASE 0\");\n                        //\n                        if (x.equals(1) && y.equals(1)) {\n                            tableModel.setValueAt(\"1\", i, spaltenAnzahl);\n                            break;\n                            //direkt hier zur Tabelle hinzufügen\n                        } else {\n                            tableModel.setValueAt(\"0\", i, spaltenAnzahl);\n                            break;\n                        }\n\n                        //OR\n                    case 1:\n                        System.out.println(\"CASE 1\");\n                        //   tableModel.addColumn(eingang1 + \" OR \" + eingang2);\n                        if (!(x.equals(0) && y.equals(0))) {\n                            tableModel.setValueAt(\"1\", i, spaltenAnzahl);\n                            break;\n                        } else {\n                            tableModel.setValueAt(\"0\", i, spaltenAnzahl);\n                            break;\n                        }\n\n                        //NAND\n                    case 2:\n                        System.out.println(\"CASE 2\");\n                        //  tableModel.addColumn(eingang1 + \" NAND \" + eingang2);\n                        if (!(x.equals(1) && y.equals(1))) {\n                            tableModel.setValueAt(\"1\", i, spaltenAnzahl);\n                            break;\n                        } else {\n                            tableModel.setValueAt(\"0\", i, spaltenAnzahl);\n                            break;\n                        }\n\n\n                        //NOR\n                    case 3:\n                        System.out.println(\"CASE 3\");\n                        //    tableModel.addColumn(eingang1 + \" OR \" + eingang2);\n                        if (!(x.equals(1) && y.equals(1))) {\n                            tableModel.setValueAt(\"1\", i, spaltenAnzahl);\n                            break;\n                        } else {\n                            tableModel.setValueAt(\"0\", i, spaltenAnzahl);\n                            break;\n                        }\n                    default:\n                        System.out.println(\"DEFAULT\");\n                }\n            }\n        } else {\n            for (int i = 0; i < table.getRowCount(); i++) { //Durchgang durch alle Zeilen\n                Object a = table.getValueAt(i, 0);\n                Object b = table.getValueAt(i, 1);\n                Object c = table.getValueAt(i, 2);\n\n                switch(randomGatter) {\n                    //AND\n                    case 0:\n                        if (a.equals(1) && b.equals(1) && c.equals(1)) {\n                            // tableModel.addColumn(\"A AND B AND C \");\n                            //newData[i][table.getColumnCount()] = \"1\";\n                            break;\n                        } else {\n                            //  newData[i][table.getColumnCount()] = \"0\";\n                            break;\n                        }\n\n                        //OR\n                    case 1:\n                        if (!(a.equals(0) && b.equals(0) && c.equals(0))) {\n                            //   tableModel.addColumn(\"A OR B OR C \");\n                            // newData[i][table.getColumnCount()] = \"1\";\n                            break;\n                        } else {\n                            //    newData[i][table.getColumnCount()] = \"0\";\n                            break;\n                        }\n\n                        //NAND\n                    case 2:\n                        if (!(a.equals(1) && b.equals(1) && c.equals(1))) {\n                            //    tableModel.addColumn(\"NOT A B C \");\n                            //    newData[i][table.getColumnCount()] = \"1\";\n                            break;\n                        } else {\n                            //   newData[i][table.getColumnCount()] = \"0\";\n                            break;\n                        }\n\n                        //NOR\n                    case 3:\n                        if (!(a.equals(1) && b.equals(1) && c.equals(1))) {\n                            //      tableModel.addColumn(\"A und B und C \");\n                            //   newData[i][table.getColumnCount()] = \"1\";\n                            break;\n                        } else {\n                            //      newData[i][table.getColumnCount()] = \"0\";\n                            break;\n                        }\n                }\n            }\n        }\n    }\n\n    @Override\n    protected void paintComponent(Graphics g) {\n        super.paintComponent(g);\n        g.drawImage(background, 0, 0, getWidth(), getHeight(), this);\n        g.setColor(Color.BLACK);\n        g.drawRoundRect(100, 150, 700, 350, 20, 20);\n        g.setColor(Color.WHITE);\n        g.fillRoundRect(100, 150, 700, 350, 20, 20);\n\n        g.setColor(Color.BLACK);\n        g.drawRoundRect(100, 15, 700, 75, 20, 20);\n        g.setColor(Color.WHITE);\n        g.fillRoundRect(100, 15, 700, 75, 20, 20);\n\n    }\n\n    public void generateTable(String mode){\n        if(mode == \"Easy\"){\n            // for(int i = 0; i < 1; i++) {\n            int gatter = numbers.nextInt(3);\n            //   createRandomGatter(3, 1, 3);\n        }  // }\n\n        if(mode == \"Herr Schaal\"){\n            for(int i = 0; i < 3; i++) {\n                int gatter = numbers.nextInt(3);\n                //    createRandomGatter(3, 1, 3);\n            }\n        }\n    }\n\n    public void paintSchaltung(List<ImageIcon> gateIcons) {\n        // Vor dem Zeichnen der neuen Schaltung entferne die vorherige\n        gateLabels.forEach(this::remove);\n        gateLabels.clear();\n\n        int x = 130;  //Startposition\n        int y = 230;\n        for (ImageIcon icon : gateIcons) {\n            JLabel label = new JLabel(icon);\n            label.setBounds(x, y, icon.getIconWidth(), icon.getIconHeight());\n            gateLabels.add(label);\n            add(label);\n\n            x += 100;  //Position horizontal verändert nach jedem durchgang\n        }\n\n        revalidate();\n        repaint();\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Panel.java b/src/Panel.java
--- a/src/Panel.java	
+++ b/src/Panel.java	
@@ -103,8 +103,10 @@
 
             }
         }
-        Object[][] rowData = new Object[eingange * eingange][eingange + gatterAnzahl]; //Tabellengröße = Zeilenanzahl + Spaltenanzahl
-        for (int i = 0; i < eingange * eingange; i++) {
+      // Hier alles erweiterbar --> man kann hier mit --> (int) Math.pow(2, eingange)
+        // --> anhand der Anzahl der Eingänge, die Anzahl der Zeilen erstellen. Formel = 2 ^ Eingänge
+        Object[][] rowData = new Object[(int) Math.pow(2, eingange)][eingange + gatterAnzahl]; //Tabellengröße = Zeilenanzahl + Spaltenanzahl
+        for (int i = 0; i < ((int) Math.pow(2, eingange)); i++) {
             for (int j = 0; j < eingange; j++) { //Füllen aller Zeilen/Spalten mit Nullen
                 rowData[i][j] = 0;
 
@@ -136,7 +138,7 @@
         table.setRowHeight(30);
 
         JScrollPane scrollPane = new JScrollPane(table);
-        scrollPane.setBounds(200, 250, table.getColumnCount() * 90, table.getRowCount() * table.getRowHeight() + 20);
+        scrollPane.setBounds(200, 200, table.getColumnCount() * 90, table.getRowCount() * table.getRowHeight() + 20);
 
 
         add(scrollPane);
