Index: src/Panel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.awt.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.*;\nimport javax.swing.table.DefaultTableModel;\nimport java.util.Random;\n\npublic class Panel extends JPanel {\n\n    protected JButton generateButton;\n    protected JComboBox<String> difficultymenu;\n    protected JComboBox<String> questionsmenu;\n    protected JButton exitButton;\n    protected JLabel difficultylabel;\n    protected JLabel questionlabel;\n    protected JLabel question;\n    protected JButton solutionButton;\n    private Model model = new Model();\n    String[] difficulties = {\"Easy\", \"Average\", \"Herr Schaal\"};\n    String[] gatterarten = {\"AND\", \"OR\", \"NOT\"};\n    String[] questions = {\"Wahrheitstabelle\", \"Digitale Schaltung\"};\n    public Image background = new ImageIcon(\"Background.png\").getImage();\n    Image exitBild = new ImageIcon(\"ExitBild.png\").getImage();\n    private List<JLabel> gateLabels = new ArrayList<>();\n    JTable table;\n    Random numbers;\n    int min = 0;\n    int max = 1;\n    int zeilenanzahl;\n    int newanzahl;\n    String[] columnNames;\n\n    public Panel() {\n\n        Image scaledExitImage = exitBild.getScaledInstance(50, 50, Image.SCALE_SMOOTH);\n        ImageIcon scaledExitIcon = new ImageIcon(scaledExitImage);\n        exitButton = new JButton(scaledExitIcon);\n        exitButton.setBorderPainted(false);\n        exitButton.setFocusPainted(false);\n        exitButton.setContentAreaFilled(false);\n\n        setLayout(null);\n\n        questionlabel = new JLabel(\"Choose your Question\");\n        difficultylabel = new JLabel(\"Choose your Difficulty\");\n        question = new JLabel(\"Erstelle aus dieser Wahrheitstabelle eine digitale Schaltungen!\");\n\n        questionlabel.setFont(new Font(\"SansSerif\", Font.BOLD, 13));\n        difficultylabel.setFont(new Font(\"SansSerif\", Font.BOLD, 13));\n        question.setFont(new Font(\"SansSerif\", Font.BOLD, 15));\n        question.setForeground(Color.BLACK);\n        questionlabel.setForeground(Color.BLACK);\n        difficultylabel.setForeground(Color.BLACK);\n\n        generateButton = new JButton(\"Generate\");\n        solutionButton = new JButton(\"Solution\");\n        difficultymenu = new JComboBox<>(difficulties);\n        questionsmenu = new JComboBox<>(questions);\n\n        questionlabel.setBounds(110, 13, 150, 30);\n        question.setBounds(200, 160, 600, 30);\n        difficultylabel.setBounds(360, 13, 150, 30);\n        generateButton.setBounds(600, 30, 150, 50);\n        difficultymenu.setBounds(360, 32, 150, 50);\n        questionsmenu.setBounds(110, 32, 160, 50);\n        solutionButton.setBounds(700, 300, 80, 50);\n        exitButton.setBounds(820, 5, 50, 50);\n\n        add(generateButton);\n        add(difficultymenu);\n        add(questionsmenu);\n        add(exitButton);\n        add(solutionButton);\n        add(questionlabel);\n        add(question);\n        add(difficultylabel);\n\n        questionlabel.setVisible(false);\n        questionsmenu.setVisible(false);\n        solutionButton.setVisible(false);\n\n        numbers = new Random();\n\n        columnNames = new String[]{\"A\", \"B\", \"C\", \"M\"};\n\n        Object[][] data = {\n                {(int)(Math.random() * ((max - min) + 1)), (int)(Math.random() * ((max - min) + 1)),\n                        (int)(Math.random() * ((max - min) + 1)), (int)(Math.random() * ((max - min) + 1))},\n                {(int)(Math.random() * ((max - min) + 1)), (int)(Math.random() * ((max - min) + 1)),\n                        (int)(Math.random() * ((max - min) + 1)), (int)(Math.random() * ((max - min) + 1))},\n                {(int)(Math.random() * ((max - min) + 1)), (int)(Math.random() * ((max - min) + 1)),\n                        (int)(Math.random() * ((max - min) + 1)), (int)(Math.random() * ((max - min) + 1))},\n                {(int)(Math.random() * ((max - min) + 1)), (int)(Math.random() * ((max - min) + 1)),\n                        (int)(Math.random() * ((max - min) + 1)), (int)(Math.random() * ((max - min) + 1))},\n        } ;\n\n        table = new JTable(data, columnNames);\n        //table.setBounds(200, 300, 150, 200);\n        table.setVisible(true);\n        this.add(table);\n        table.setShowGrid(true);\n        table.setGridColor(Color.BLACK);\n        table.setRowHeight(20);\n\n        JScrollPane scrollPane = new JScrollPane(table);\n        scrollPane.setBounds(200, 250, table.getColumnCount() * 45, table.getRowCount()* table.getRowHeight() + 20);\n        add(scrollPane);\n\n        table.getTableHeader().setReorderingAllowed(false); // not allow re-ordering of columns\n        table.getTableHeader().setResizingAllowed(false);\n        table.setEnabled(false);\n        table.setBackground(Color.LIGHT_GRAY);\n\n\n\n    }\n/*\n    public void generateTruthTable(int eingaenge) {\n        DefaultTableModel model = new DefaultTableModel();\n        table = new JTable(model);\n\n        // Hinzufügen der Spaltenüberschriften A, B C\n        for (int i = 0; i < eingaenge; i++) {\n            model.addColumn(\"A\");\n        }\n\n        // Iteration über alle möglichen Binärkombinationen\n        for (int i = 0; i < Math.pow(2, eingaenge); i++) {\n            String binaryRepresentation = Integer.toBinaryString(i);\n\n            Object[] rowData = new Object[eingaenge];\n\n            // Binärziffern mit Nullen\n            for (int j = 0; j < eingaenge - binaryRepresentation.length(); j++) {\n                rowData[j] = 0;\n            }\n\n            // Füllen der restlichen Binärziffern\n            for (int j = 0; j < binaryRepresentation.length(); j++) {\n                rowData[eingaenge - binaryRepresentation.length() + j] = Character.getNumericValue(binaryRepresentation.charAt(j));\n            }\n\n            model.addRow(rowData);\n\n        }\n\n        table.setBounds(200, 300, 150, 200);\n        add(table);\n    }\n*/\n\n    public static ArrayList aufteilenUndAusgeben(int zahl) {\n        // Zahl in einen String umwandeln\n        String zahlString = Integer.toString(zahl);\n        ArrayList zifferlist = new ArrayList();\n\n        // Jeden Charakter des Strings in eine separate Ziffer konvertieren\n        for (int i = 0; i < zahlString.length(); i++) {\n            char zifferChar = zahlString.charAt(i);\n            int ziffer = Character.getNumericValue(zifferChar);\n            zifferlist.add(ziffer);\n\n            System.out.println(\"Ziffer \" + (i + 1) + \": \" + ziffer);\n        }\n        return zifferlist;\n    }\n\n    public void createEasyGatter(int randomGatterZahl) {\n        Random random = new Random();\n        int randomX = random.nextInt(3);\n        int randomY;\n        do {\n            randomY = random.nextInt(3);\n        } while (randomY == randomX);\n\n        for(int i = 0; i < table.getRowCount(); i++) {\n\n            Object x = table.getValueAt(i, randomX);\n            Object y = table.getValueAt(i, randomY);\n\n            String eingang1 = randomX == 0 ? \"A\" : randomX == 1 ? \"B\" : \"C\";\n            String eingang2 = randomY == 0 ? \"A\" : randomY == 1 ? \"B\" : \"C\";\n\n            System.out.println(eingang1 + \" = \" + x + \" \" + eingang2 +  \" = \" +y);\n                // 0 & 0 = 0, 1 & 1 = 1, 0 & 1 = 0\n                //Neue Spalte\n\n            switch (randomGatterZahl) {\n                case 0:   //AND\n                    if(x.equals(y)) {\n                        System.out.println(\"A und B sind gleich\");\n                        //print Spalte AuB\n                    }\n                    if(!x.equals(y)) {\n                        System.out.println(\"A und B sind NICHT gleich\");\n                        //print Spalte AuB\n\n                    }\n                    break;\n                case 1:\n                    if(x.equals(y)) {\n                        System.out.println(\"Ergebnis: 1\");\n                        //print Spalte AuB\n                    }\n                    if(!x.equals(y)) {\n                        System.out.println(\"A und B sind NICHT gleich\");\n                        //print Spalte AuB\n\n                    }\n                    break;\n                case 2:  //NOT\n                    System.out.println(\"Kombination 3\");\n                    break;\n                default:\n                    System.out.println(\"Keine der erwarteten Kombinationen\");\n            }\n\n            System.out.println(\"Neue Zeile\");\n        }\n    }\n\n    public void createDifficultGatter(int randomGatterZahl) { //nur ein gatter aber dafür alle drei Eingänge drin, einziger unterschied sind, dass es drei kombis sind (not, and, or)\n        Random random = new Random();\n        int randomX = random.nextInt(3);\n        int randomY;\n        do {\n            randomY = random.nextInt(3);\n        } while (randomY == randomX);\n\n        for(int i = 0; i < table.getRowCount(); i++) {\n\n            Object x = table.getValueAt(i, randomX);\n            Object y = table.getValueAt(i, randomY);\n\n            String eingang1 = randomX == 0 ? \"A\" : randomX == 1 ? \"B\" : \"C\";\n            String eingang2 = randomY == 0 ? \"A\" : randomY == 1 ? \"B\" : \"C\";\n\n            System.out.println(eingang1 + \" = \" + x + \" \" + eingang2 +  \" = \" +y);\n            // 0 & 0 = 0, 1 & 1 = 1, 0 & 1 = 0\n            //Neue Spalte\n\n            switch (randomGatterZahl) {\n                case 0:   //AND\n                    if(x.equals(1) && y.equals(1)) {\n                        System.out.println(\"A und B sind gleich\");\n                        //print Spalte AuB\n                    } else {\n                        System.out.println(\"A und B sind NICHT gleich\");\n                        //print Spalte AuB\n                    }\n                    break;\n                case 1: //OR\n                    if(!(x.equals(0) && y.equals(0))) {\n                        System.out.println(\"OR-Ergebnis: 1\");\n                    } else {\n                        System.out.println(\"OR-Ergebnis: 0\");\n                    }\n                break;\n\n                case 2:   //NAND\n                    if(!(x.equals(1) && y.equals(1))) {\n                        System.out.println(\"NAND-Ergebnis: 1\");\n                        //print Spalte AuB\n                    } else {\n                        System.out.println(\"NAND-Ergebnis: 0\");\n                        //print Spalte AuB\n                    }\n                    break;\n\n                case 4:   //NOR\n                    if(!(x.equals(1) && y.equals(1))) {\n                        System.out.println(\"NAND-Ergebnis: 1\");\n                        //print Spalte AuB\n                    } else {\n                        System.out.println(\"NAND-Ergebnis: 0\");\n                        //print Spalte AuB\n                    }\n                    break;\n                default:\n                    System.out.println(\"Keine der erwarteten Kombinationen\");\n            }\n            System.out.println(\"Neue Zeile\");\n        }\n    }\n\n\n    @Override\n    protected void paintComponent(Graphics g) {\n        super.paintComponent(g);\n        g.drawImage(background, 0, 0, getWidth(), getHeight(), this);\n        g.setColor(Color.BLACK);\n        g.drawRoundRect(100, 150, 700, 350, 20, 20);\n        g.setColor(Color.WHITE);\n        g.fillRoundRect(100, 150, 700, 350, 20, 20);\n\n        g.setColor(Color.BLACK);\n        g.drawRoundRect(100, 15, 700, 75, 20, 20);\n        g.setColor(Color.WHITE);\n        g.fillRoundRect(100, 15, 700, 75, 20, 20);\n\n    }\n\n    public void generateTable(String mode){\n        if(mode == \"Easy\"){\n       // for(int i = 0; i < 1; i++) {\n            int gatter = numbers.nextInt(3);\n            createEasyGatter(gatter);\n        }  // }\n\n        if(mode == \"Herr Schaal\"){\n            for(int i = 0; i < 3; i++) {\n                int gatter = numbers.nextInt(3);\n                createDifficultGatter(gatter);\n            }\n        }\n    }\n\n    public void paintSchaltung(List<ImageIcon> gateIcons) {\n        // Vor dem Zeichnen der neuen Schaltung entferne die vorherige\n        gateLabels.forEach(this::remove);\n        gateLabels.clear();\n\n        int x = 130;  //Startposition\n        int y = 230;\n        for (ImageIcon icon : gateIcons) {\n            JLabel label = new JLabel(icon);\n            label.setBounds(x, y, icon.getIconWidth(), icon.getIconHeight());\n            gateLabels.add(label);\n            add(label);\n\n            x += 100;  //Position horizontal verändert nach jedem durchgang\n        }\n\n        revalidate();\n        repaint();\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Panel.java b/src/Panel.java
--- a/src/Panel.java	(revision a2bb5c158adcb7388b1b61c33ef826755332bfac)
+++ b/src/Panel.java	(date 1701215707812)
@@ -7,28 +7,28 @@
 
 public class Panel extends JPanel {
 
-    protected JButton generateButton;
-    protected JComboBox<String> difficultymenu;
-    protected JComboBox<String> questionsmenu;
-    protected JButton exitButton;
-    protected JLabel difficultylabel;
-    protected JLabel questionlabel;
-    protected JLabel question;
-    protected JButton solutionButton;
-    private Model model = new Model();
-    String[] difficulties = {"Easy", "Average", "Herr Schaal"};
-    String[] gatterarten = {"AND", "OR", "NOT"};
-    String[] questions = {"Wahrheitstabelle", "Digitale Schaltung"};
-    public Image background = new ImageIcon("Background.png").getImage();
-    Image exitBild = new ImageIcon("ExitBild.png").getImage();
-    private List<JLabel> gateLabels = new ArrayList<>();
-    JTable table;
-    Random numbers;
-    int min = 0;
-    int max = 1;
-    int zeilenanzahl;
-    int newanzahl;
-    String[] columnNames;
+    protected JButton generateButton; //
+    protected JComboBox<String> difficultymenu; //
+    protected JComboBox<String> questionsmenu; // noch nicht in OO
+    protected JButton exitButton; //
+   // protected JLabel difficultylabel;
+   // protected JLabel questionlabel;
+   // protected JLabel question;
+    protected JButton solutionButton; //noch nicht in OO
+    //private Model model = new Model();
+    String[] difficulties = {"Easy", "Average", "Herr Schaal"}; //
+    String[] gatterarten = {"AND", "OR", "NOT"}; //
+    String[] questions = {"Wahrheitstabelle", "Digitale Schaltung"}; //noch nicht in OO
+    public Image background = new ImageIcon("Background.png").getImage(); //
+    Image exitBild = new ImageIcon("ExitBild.png").getImage(); //
+    private List<JLabel> gateLabels = new ArrayList<>(); //--> erstmal überflüssig noch nicht in OO
+    JTable table; //
+    Random numbers; //
+    int min = 0; //--> überflüssig noch nicht in OO
+    int max = 1; //--> überflüssig noch nicht in OO
+   // int zeilenanzahl;
+   // int newanzahl;
+    String[] columnNames;//
 
     public Panel() {
 
@@ -112,7 +112,6 @@
         table.setBackground(Color.LIGHT_GRAY);
 
 
-
     }
 /*
     public void generateTruthTable(int eingaenge) {
